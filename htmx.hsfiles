{-# START_FILE .ghci #-}
:set -fobject-code
:set -iapp -isrc
:set -fno-warn-missing-home-modules
:def restart (\_ -> return ":load Dev\nstart")
{-# START_FILE .gitignore #-}
/dist-newstyle/
/node_modules/
{-# START_FILE CHANGELOG.md #-}
# Revision history for {{name}}

## 0.1.0.0 -- YYYY-mm-dd

* First version. Released on an unsuspecting world.
{-# START_FILE LICENSE #-}
Copyright (c) 2023 {{author}}

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
{-# START_FILE README.md #-}
# {{name}}

## Install needed binaries

    cabal install hspec-discover
    cabal install doctest

## Install Javascript Toolchain

    pnpm install

## Running

    # doctests
    cabal exec repl --with-ghc=doctest

    # spec
    cabal test

    # use the repl - type :restart at the prompt, repeatedly
    cabal repl

The :restart command will automatically bundle css + js,
the same when building the server (here the bundled css/js will be embedded).

    cabal build # will build an executuable with css+js embedded

    cabal run {{name}} # will run the executable


## Using in GHCI

* https://github.com/chrisdone/ghci-reload-demo
* https://chrisdone.com/posts/making-ghci-fast/
{-# START_FILE app/Dev.hs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}

module Dev where

import Control.Concurrent (forkIO, killThread)
import Control.Concurrent.Chan.Unagi (newChan, writeChan)
import Data.IORef (newIORef, readIORef)
import Data.Word (Word32)
import Foreign.Store (Store (..), deleteStore, lookupStore, readStore, writeStore)
import Main.Build qualified
import Main.Server qualified

--
-- in ghci, use start (which can also re-start!) and optionally stop
--
start :: IO ()
start = do
  Main.Build.main
  reload <- reuseStored reloadStoreId (fst <$> newChan)
  tid <- reuseStored tidStoreId $ Main.Server.withServerVerbosity (Just reload) Main.Server.resourcesWare startServer
  putStrLn ("started server with tid " <> show tid)
  writeChan reload ()
  return ()
  where
    startServer server env =
      forkIO . Main.Server.runServer server env

stop :: IO ()
stop = do
  shutdownStored tidStoreId killThread
  shutdownStored reloadStoreId $ \reload ->
    -- trigger a reload so the running threads complete
    writeChan reload ()

reuseStored :: Word32 -> IO a -> IO a
reuseStored idx create =
  lookupStore idx >>= \case
    Nothing -> do
      x <- create
      ref <- newIORef x
      _ <- writeStore (Store idx) ref
      return x
    Just store -> do
      ref <- readStore store
      readIORef ref

shutdownStored :: Word32 -> (a -> IO ()) -> IO ()
shutdownStored idx action = do
  lookupStore idx >>= \case
    Nothing -> return ()
    Just store -> do
      ref <- readStore store
      x <- readIORef ref
      action x
      deleteStore store

reloadStoreId :: Word32
reloadStoreId = 0

tidStoreId :: Word32
tidStoreId = 1
{-# START_FILE app/Main.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TemplateHaskell #-}

module Main where

import Main.BuildTH qualified
import Main.Server qualified
import Network.Wai (Middleware, Request (pathInfo))
import Network.Wai.Application.Static (staticApp)
import WaiAppStatic.Storage.Embedded (mkSettings)

--
-- main entry point from the command line
--
main :: IO ()
main = do
  Main.Server.withServerVerbosity
    Nothing
    (const embeddedResourcesWare)
    Main.Server.runServer

embeddedResourcesWare :: Middleware
embeddedResourcesWare app req send =
  case pathInfo req of
    "resources" : _ -> static req send
    _ -> app req send
  where
    static = staticApp $(mkSettings (Main.BuildTH.mkEmbedded "dist-newstyle"))
{-# START_FILE app/Main/Build.hs #-}
module Main.Build where

import Development.Shake
-- import Development.Shake.Command
import Development.Shake.FilePath

-- import Development.Shake.Util

-- | Interactive entry point, allows command arguments
main :: IO ()
main = shakeArgs options rules

-- | Build hard coded to the default targets
-- |
-- | But it does not try to parse the command line, so it
-- | should work with template haskell
build :: IO ()
build = shake options rules

rules :: Rules ()
rules = do
  want [outputResourceDir </> "{{name}}.js.gz", outputResourceDir </> "{{name}}.css.gz"]

  phony "clean" $ do
    putInfo ("Cleaning " <> shakeDir)
    removeFilesAfter shakeDir ["//*"]

  outputResourceDir </> "*.gz" %> \out -> do
    let in_ = dropExtension out
    need [in_, buildHS]
    cmd_ "gzip -9 -fk" [in_]

  outputResourceDir </> "{{name}}.css" %> \out -> do
    let in_ = "resources/{{name}}.css"
    need [in_, buildHS]
    cmd_ "pnpm tailwindcss -i" in_ "--minify -o " out

  outputResourceDir </> "{{name}}.js" %> \out -> do
    let in_ = "resources/{{name}}.js"
    need [in_, buildHS]
    cmd_ "pnpm esbuild" [in_] (" --bundle --minify --outfile=" <> out)

distDir :: FilePath
distDir = "dist-newstyle"

shakeDir :: FilePath
shakeDir = distDir </> "_shake"

outputResourceDir :: FilePath
outputResourceDir = distDir </> "resources"

buildHS :: FilePath
buildHS = "app/Main/Build.hs"

options :: ShakeOptions
options = shakeOptions {shakeFiles = shakeDir}
{-# START_FILE app/Main/BuildTH.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskellQuotes #-}

module Main.BuildTH where

import Control.Monad (forM)
import Crypto.Hash.SHA256 (hashlazy)
import Data.ByteString.Base64 as B64
import Data.ByteString.Lazy as BL
import Data.Function ((&))
import Data.String (fromString)
import Data.Text qualified as T
import Data.Text.Encoding qualified as T
import Language.Haskell.TH
import Main.Build qualified as Build
import Network.Mime (defaultMimeLookup)
import System.FilePath ((</>))
import System.FilePattern.Directory (getDirectoryFiles)
import WaiAppStatic.Storage.Embedded

etag :: BL.ByteString -> T.Text
etag bytes =
  hashlazy bytes
    & B64.encode
    & T.decodeUtf8

mkEmbedded :: FilePath -> IO [EmbeddableEntry]
mkEmbedded rootDir = do
  Build.build
  files <- getDirectoryFiles rootDir ["resources/**/*"]
  -- this store compressed text again, but that is ok
  -- one is used internally (but does not blow up the executable)
  -- the pre-compressed one will be actually served and may be even smaller
  forM files $ \fn -> do
    bytes <- BL.readFile (rootDir </> fn)
    return
      EmbeddableEntry
        { eLocation = T.pack fn,
          eMimeType = defaultMimeLookup (T.pack fn),
          eContent = Left (etag bytes, bytes)
        }

-- stolen from file-embed
strToExp :: String -> Q Exp
strToExp s =
  return $
    VarE 'fromString
      `AppE` LitE (StringL s)
{-# START_FILE app/Main/Cmd.hs #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-cse #-}

module Main.Cmd where

import Data.Data ()
import Data.Maybe (fromMaybe)
import System.Console.CmdArgs.Implicit
import System.Environment (lookupEnv)

-- this name is choosen so the cmdargs output looks good
data Server = Server
  { port :: Int,
    rootDir :: FilePath
  }
  deriving (Show, Eq, Data, Typeable)

parseArgs :: IO (Server, Verbosity)
parseArgs = do
  defaults <- envSettings
  server <- cmdArgsRun $ cmdArgsMode (serverArgs defaults)
  verb <- getVerbosity
  return (server, verb)

envString :: String -> String -> IO String
envString k d = fromMaybe d <$> lookupEnv k

-- this may blow up, but for argument parsing that is ok
envRead :: (Read a, Show a) => String -> a -> IO a
envRead k d = read <$> envString k (show d)

envSettings :: IO Server
envSettings = do
  port <- envRead @Int "PORT" 8080
  rootDir <- envString "ROOTDIR" "dist-newstyle"
  return Server {port, rootDir}

serverArgs :: Server -> Server
serverArgs Server {rootDir, port} =
  Server
    { port = port &= help "Port" &= typ "PORT",
      rootDir = rootDir &= help "Directory with /resources (dist-newstyle)" &= typ "DIR"
    }
    &= help "Server settings"
    &= verbosity
    &= summary "{{name}} v0.0.0, (c) {{author}}"
    &= details ["Run the example server", "", "Htmx for fun and profix!"]
{-# START_FILE app/Main/Server.hs #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedStrings #-}

module Main.Server where

import Control.Concurrent.Chan.Unagi (InChan)
import Data.ByteString.Builder (byteString)
import Data.ByteString.Char8 qualified as BS
import Data.Data ()
import Data.Function ((&))
import Main.Cmd qualified as Cmd
import Network.HTTP.Types (Status (statusCode))
import Network.Wai
  ( Middleware,
    Request (pathInfo, rawPathInfo, requestMethod),
    responseStatus,
  )
import Network.Wai.Application.Static (defaultFileServerSettings, staticApp)
import Network.Wai.Handler.Warp (run)
import Network.Wai.Middleware.Gzip qualified as GZ
import System.Log.FastLogger (LogType' (LogStdout), newTimeCache, newTimedFastLogger)
import Xxx.Server.App (mainApp)
import Xxx.Server.Log (logDebug, logInfo, space)
import Xxx.Server.Types qualified as T

withServerVerbosity :: Maybe (InChan ()) -> (FilePath -> Middleware) -> (Cmd.Server -> T.Env -> (FilePath -> Middleware) -> IO a) -> IO a
withServerVerbosity reload serverWare handler = do
  (server, verbosity) <- Cmd.parseArgs
  {- bsd strfmttime/strptime
    * %F is replaced by the date in the format “%Y-%m-%d”.
    * %T is replaced by the time in the format “%H:%M:%S”.
  -}
  fmt <- newTimeCache "%F %T"
  -- withTimedFastLogger does not work in ghci - the cleanup action seems to disable further logging
  logger <- fst <$> newTimedFastLogger fmt (LogStdout 4096)
  let env = T.Env {logger, reload, verbosity}
  handler server env serverWare

runServer :: Cmd.Server -> T.Env -> (FilePath -> Middleware) -> IO ()
runServer Cmd.Server {rootDir, port} env serverWare = do
  logInfo env (byteString "running on port " <> byteString (BS.pack $ show port))
  let app =
        mainApp env
          & serverWare rootDir
          & gzipWare
          & logWare env
  run port app

logWare :: T.Env -> Middleware
logWare env app req respond =
  app req intercept
  where
    intercept response = do
      logDebug
        env
        ( "response: "
            <> byteString (requestMethod req)
            <> space
            <> byteString (rawPathInfo req)
            <> space
            <> byteString (BS.pack $ show $ statusCode $ responseStatus response)
        )
      respond response

resourcesWare :: FilePath -> Middleware
resourcesWare rootDir app req send =
  case pathInfo req of
    "resources" : _ -> static req send
    _ -> app req send
  where
    static = staticApp (defaultFileServerSettings rootDir)

gzipWare :: Middleware
gzipWare = GZ.gzip (GZ.def {GZ.gzipFiles = GZ.GzipPreCompressed GZ.GzipIgnore})
{-# START_FILE package.json #-}
{
	"private": true,
	"scripts": {
		"comment": "echo BETTER USE THE SHAKEFILE, SEE README",
		"bundle-css": "tailwindcss -i resources/{{name}}.css --minify -o dist-newstyle/resources/{{name}}.css",
		"bundle-js": "esbuild resources/{{name}}.js --bundle --minify --outfile=dist-newstyle/resources/{{name}}.js"
	},
	"devDependencies": {
		"autoprefixer": "^10.4.15",
		"daisyui": "^3.7.6",
		"esbuild": "^0.19.3",
		"htmx.org": "^1.9.5",
		"postcss-import": "^15.1.0",
		"tailwindcss": "^3.3.3"
	}
}
{-# START_FILE pnpm-lock.yaml #-}
lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

devDependencies:
  autoprefixer:
    specifier: ^10.4.15
    version: 10.4.15(postcss@8.4.30)
  daisyui:
    specifier: ^3.7.6
    version: 3.7.6
  esbuild:
    specifier: ^0.19.3
    version: 0.19.3
  htmx.org:
    specifier: ^1.9.5
    version: 1.9.5
  postcss-import:
    specifier: ^15.1.0
    version: 15.1.0(postcss@8.4.30)
  tailwindcss:
    specifier: ^3.3.3
    version: 3.3.3

packages:

  /@alloc/quick-lru@5.2.0:
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}
    dev: true

  /@esbuild/android-arm64@0.19.3:
    resolution: {integrity: sha512-w+Akc0vv5leog550kjJV9Ru+MXMR2VuMrui3C61mnysim0gkFCPOUTAfzTP0qX+HpN9Syu3YA3p1hf3EPqObRw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-arm@0.19.3:
    resolution: {integrity: sha512-Lemgw4io4VZl9GHJmjiBGzQ7ONXRfRPHcUEerndjwiSkbxzrpq0Uggku5MxxrXdwJ+pTj1qyw4jwTu7hkPsgIA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-x64@0.19.3:
    resolution: {integrity: sha512-FKQJKkK5MXcBHoNZMDNUAg1+WcZlV/cuXrWCoGF/TvdRiYS4znA0m5Il5idUwfxrE20bG/vU1Cr5e1AD6IEIjQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-arm64@0.19.3:
    resolution: {integrity: sha512-kw7e3FXU+VsJSSSl2nMKvACYlwtvZB8RUIeVShIEY6PVnuZ3c9+L9lWB2nWeeKWNNYDdtL19foCQ0ZyUL7nqGw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-x64@0.19.3:
    resolution: {integrity: sha512-tPfZiwF9rO0jW6Jh9ipi58N5ZLoSjdxXeSrAYypy4psA2Yl1dAMhM71KxVfmjZhJmxRjSnb29YlRXXhh3GqzYw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-arm64@0.19.3:
    resolution: {integrity: sha512-ERDyjOgYeKe0Vrlr1iLrqTByB026YLPzTytDTz1DRCYM+JI92Dw2dbpRHYmdqn6VBnQ9Bor6J8ZlNwdZdxjlSg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-x64@0.19.3:
    resolution: {integrity: sha512-nXesBZ2Ad1qL+Rm3crN7NmEVJ5uvfLFPLJev3x1j3feCQXfAhoYrojC681RhpdOph8NsvKBBwpYZHR7W0ifTTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm64@0.19.3:
    resolution: {integrity: sha512-qXvYKmXj8GcJgWq3aGvxL/JG1ZM3UR272SdPU4QSTzD0eymrM7leiZH77pvY3UetCy0k1xuXZ+VPvoJNdtrsWQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm@0.19.3:
    resolution: {integrity: sha512-zr48Cg/8zkzZCzDHNxXO/89bf9e+r4HtzNUPoz4GmgAkF1gFAFmfgOdCbR8zMbzFDGb1FqBBhdXUpcTQRYS1cQ==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ia32@0.19.3:
    resolution: {integrity: sha512-7XlCKCA0nWcbvYpusARWkFjRQNWNGlt45S+Q18UeS///K6Aw8bB2FKYe9mhVWy/XLShvCweOLZPrnMswIaDXQA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-loong64@0.19.3:
    resolution: {integrity: sha512-qGTgjweER5xqweiWtUIDl9OKz338EQqCwbS9c2Bh5jgEH19xQ1yhgGPNesugmDFq+UUSDtWgZ264st26b3de8A==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-mips64el@0.19.3:
    resolution: {integrity: sha512-gy1bFskwEyxVMFRNYSvBauDIWNggD6pyxUksc0MV9UOBD138dKTzr8XnM2R4mBsHwVzeuIH8X5JhmNs2Pzrx+A==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ppc64@0.19.3:
    resolution: {integrity: sha512-UrYLFu62x1MmmIe85rpR3qou92wB9lEXluwMB/STDzPF9k8mi/9UvNsG07Tt9AqwPQXluMQ6bZbTzYt01+Ue5g==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-riscv64@0.19.3:
    resolution: {integrity: sha512-9E73TfyMCbE+1AwFOg3glnzZ5fBAFK4aawssvuMgCRqCYzE0ylVxxzjEfut8xjmKkR320BEoMui4o/t9KA96gA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-s390x@0.19.3:
    resolution: {integrity: sha512-LlmsbuBdm1/D66TJ3HW6URY8wO6IlYHf+ChOUz8SUAjVTuaisfuwCOAgcxo3Zsu3BZGxmI7yt//yGOxV+lHcEA==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-x64@0.19.3:
    resolution: {integrity: sha512-ogV0+GwEmvwg/8ZbsyfkYGaLACBQWDvO0Kkh8LKBGKj9Ru8VM39zssrnu9Sxn1wbapA2qNS6BiLdwJZGouyCwQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/netbsd-x64@0.19.3:
    resolution: {integrity: sha512-o1jLNe4uzQv2DKXMlmEzf66Wd8MoIhLNO2nlQBHLtWyh2MitDG7sMpfCO3NTcoTMuqHjfufgUQDFRI5C+xsXQw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/openbsd-x64@0.19.3:
    resolution: {integrity: sha512-AZJCnr5CZgZOdhouLcfRdnk9Zv6HbaBxjcyhq0StNcvAdVZJSKIdOiPB9az2zc06ywl0ePYJz60CjdKsQacp5Q==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/sunos-x64@0.19.3:
    resolution: {integrity: sha512-Acsujgeqg9InR4glTRvLKGZ+1HMtDm94ehTIHKhJjFpgVzZG9/pIcWW/HA/DoMfEyXmANLDuDZ2sNrWcjq1lxw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-arm64@0.19.3:
    resolution: {integrity: sha512-FSrAfjVVy7TifFgYgliiJOyYynhQmqgPj15pzLyJk8BUsnlWNwP/IAy6GAiB1LqtoivowRgidZsfpoYLZH586A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-ia32@0.19.3:
    resolution: {integrity: sha512-xTScXYi12xLOWZ/sc5RBmMN99BcXp/eEf7scUC0oeiRoiT5Vvo9AycuqCp+xdpDyAU+LkrCqEpUS9fCSZF8J3Q==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-x64@0.19.3:
    resolution: {integrity: sha512-FbUN+0ZRXsypPyWE2IwIkVjDkDnJoMJARWOcFZn4KPPli+QnKqF0z1anvfaYe3ev5HFCpRDLLBDHyOALLppWHw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@jridgewell/gen-mapping@0.3.3:
    resolution: {integrity: sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==}
    engines: {node: '>=6.0.0'}
    dependencies:
      '@jridgewell/set-array': 1.1.2
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.19
    dev: true

  /@jridgewell/resolve-uri@3.1.1:
    resolution: {integrity: sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==}
    engines: {node: '>=6.0.0'}
    dev: true

  /@jridgewell/set-array@1.1.2:
    resolution: {integrity: sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==}
    engines: {node: '>=6.0.0'}
    dev: true

  /@jridgewell/sourcemap-codec@1.4.15:
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}
    dev: true

  /@jridgewell/trace-mapping@0.3.19:
    resolution: {integrity: sha512-kf37QtfW+Hwx/buWGMPcR60iF9ziHa6r/CZJIHbmcm4+0qrXiVdxegAH0F6yddEVQ7zdkjcGCgCzUu+BcbhQxw==}
    dependencies:
      '@jridgewell/resolve-uri': 3.1.1
      '@jridgewell/sourcemap-codec': 1.4.15
    dev: true

  /@nodelib/fs.scandir@2.1.5:
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0
    dev: true

  /@nodelib/fs.stat@2.0.5:
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}
    dev: true

  /@nodelib/fs.walk@1.2.8:
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.15.0
    dev: true

  /any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}
    dev: true

  /anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1
    dev: true

  /arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}
    dev: true

  /autoprefixer@10.4.15(postcss@8.4.30):
    resolution: {integrity: sha512-KCuPB8ZCIqFdA4HwKXsvz7j6gvSDNhDP7WnUjBleRkKjPdvCmHFuQ77ocavI8FT6NdvlBnE2UFr2H4Mycn8Vew==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0
    dependencies:
      browserslist: 4.21.10
      caniuse-lite: 1.0.30001538
      fraction.js: 4.3.6
      normalize-range: 0.1.2
      picocolors: 1.0.0
      postcss: 8.4.30
      postcss-value-parser: 4.2.0
    dev: true

  /balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}
    dev: true

  /binary-extensions@2.2.0:
    resolution: {integrity: sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==}
    engines: {node: '>=8'}
    dev: true

  /brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1
    dev: true

  /braces@3.0.2:
    resolution: {integrity: sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==}
    engines: {node: '>=8'}
    dependencies:
      fill-range: 7.0.1
    dev: true

  /browserslist@4.21.10:
    resolution: {integrity: sha512-bipEBdZfVH5/pwrvqc+Ub0kUPVfGUhlKxbvfD+z1BDnPEO/X98ruXGA1WP5ASpAFKan7Qr6j736IacbZQuAlKQ==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true
    dependencies:
      caniuse-lite: 1.0.30001538
      electron-to-chromium: 1.4.525
      node-releases: 2.0.13
      update-browserslist-db: 1.0.11(browserslist@4.21.10)
    dev: true

  /camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}
    dev: true

  /caniuse-lite@1.0.30001538:
    resolution: {integrity: sha512-HWJnhnID+0YMtGlzcp3T9drmBJUVDchPJ08tpUGFLs9CYlwWPH2uLgpHn8fND5pCgXVtnGS3H4QR9XLMHVNkHw==}
    dev: true

  /chokidar@3.5.3:
    resolution: {integrity: sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==}
    engines: {node: '>= 8.10.0'}
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.2
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3
    dev: true

  /colord@2.9.3:
    resolution: {integrity: sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==}
    dev: true

  /commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}
    dev: true

  /concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}
    dev: true

  /css-selector-tokenizer@0.8.0:
    resolution: {integrity: sha512-Jd6Ig3/pe62/qe5SBPTN8h8LeUg/pT4lLgtavPf7updwwHpvFzxvOQBHYj2LZDMjUnBzgvIUSjRcf6oT5HzHFg==}
    dependencies:
      cssesc: 3.0.0
      fastparse: 1.1.2
    dev: true

  /cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true
    dev: true

  /daisyui@3.7.6:
    resolution: {integrity: sha512-7MsD3J1/LpRkxvkjm0OQBjmVhzEhQdi6lTfEP2Wrvgl/fjKst4KmfkM39g0iInroaFq1fEJbB/vobGDqFgXoYw==}
    engines: {node: '>=16.9.0'}
    dependencies:
      colord: 2.9.3
      css-selector-tokenizer: 0.8.0
      postcss: 8.4.30
      postcss-js: 4.0.1(postcss@8.4.30)
      tailwindcss: 3.3.3
    transitivePeerDependencies:
      - ts-node
    dev: true

  /didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}
    dev: true

  /dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}
    dev: true

  /electron-to-chromium@1.4.525:
    resolution: {integrity: sha512-GIZ620hDK4YmIqAWkscG4W6RwY6gOx1y5J6f4JUQwctiJrqH2oxZYU4mXHi35oV32tr630UcepBzSBGJ/WYcZA==}
    dev: true

  /esbuild@0.19.3:
    resolution: {integrity: sha512-UlJ1qUUA2jL2nNib1JTSkifQTcYTroFqRjwCFW4QYEKEsixXD5Tik9xML7zh2gTxkYTBKGHNH9y7txMwVyPbjw==}
    engines: {node: '>=12'}
    hasBin: true
    requiresBuild: true
    optionalDependencies:
      '@esbuild/android-arm': 0.19.3
      '@esbuild/android-arm64': 0.19.3
      '@esbuild/android-x64': 0.19.3
      '@esbuild/darwin-arm64': 0.19.3
      '@esbuild/darwin-x64': 0.19.3
      '@esbuild/freebsd-arm64': 0.19.3
      '@esbuild/freebsd-x64': 0.19.3
      '@esbuild/linux-arm': 0.19.3
      '@esbuild/linux-arm64': 0.19.3
      '@esbuild/linux-ia32': 0.19.3
      '@esbuild/linux-loong64': 0.19.3
      '@esbuild/linux-mips64el': 0.19.3
      '@esbuild/linux-ppc64': 0.19.3
      '@esbuild/linux-riscv64': 0.19.3
      '@esbuild/linux-s390x': 0.19.3
      '@esbuild/linux-x64': 0.19.3
      '@esbuild/netbsd-x64': 0.19.3
      '@esbuild/openbsd-x64': 0.19.3
      '@esbuild/sunos-x64': 0.19.3
      '@esbuild/win32-arm64': 0.19.3
      '@esbuild/win32-ia32': 0.19.3
      '@esbuild/win32-x64': 0.19.3
    dev: true

  /escalade@3.1.1:
    resolution: {integrity: sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==}
    engines: {node: '>=6'}
    dev: true

  /fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.5
    dev: true

  /fastparse@1.1.2:
    resolution: {integrity: sha512-483XLLxTVIwWK3QTrMGRqUfUpoOs/0hbQrl2oz4J0pAcm3A3bu84wxTFqGqkJzewCLdME38xJLJAxBABfQT8sQ==}
    dev: true

  /fastq@1.15.0:
    resolution: {integrity: sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==}
    dependencies:
      reusify: 1.0.4
    dev: true

  /fill-range@7.0.1:
    resolution: {integrity: sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==}
    engines: {node: '>=8'}
    dependencies:
      to-regex-range: 5.0.1
    dev: true

  /fraction.js@4.3.6:
    resolution: {integrity: sha512-n2aZ9tNfYDwaHhvFTkhFErqOMIb8uyzSQ+vGJBjZyanAKZVbGUQ1sngfk9FdkBw7G26O7AgNjLcecLffD1c7eg==}
    dev: true

  /fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}
    dev: true

  /fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /function-bind@1.1.1:
    resolution: {integrity: sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==}
    dev: true

  /glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}
    dependencies:
      is-glob: 4.0.3
    dev: true

  /glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}
    dependencies:
      is-glob: 4.0.3
    dev: true

  /glob@7.1.6:
    resolution: {integrity: sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==}
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1
    dev: true

  /has@1.0.3:
    resolution: {integrity: sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==}
    engines: {node: '>= 0.4.0'}
    dependencies:
      function-bind: 1.1.1
    dev: true

  /htmx.org@1.9.5:
    resolution: {integrity: sha512-YUMH1/zOe+75bZnSbtkqwK8wAoTJcgvwVA2W6CXoODBtsg2F9HJIPzM3vzosevrilpV6jLAR6nKapKypBs7v2A==}
    dev: true

  /inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2
    dev: true

  /inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}
    dev: true

  /is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}
    dependencies:
      binary-extensions: 2.2.0
    dev: true

  /is-core-module@2.13.0:
    resolution: {integrity: sha512-Z7dk6Qo8pOCp3l4tsX2C5ZVas4V+UxwQodwZhLopL91TX8UyyHEXafPcyoeeWuLrwzHcr3igO78wNLwHJHsMCQ==}
    dependencies:
      has: 1.0.3
    dev: true

  /is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}
    dev: true

  /is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}
    dependencies:
      is-extglob: 2.1.1
    dev: true

  /is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}
    dev: true

  /jiti@1.20.0:
    resolution: {integrity: sha512-3TV69ZbrvV6U5DfQimop50jE9Dl6J8O1ja1dvBbMba/sZ3YBEQqJ2VZRoQPVnhlzjNtU1vaXRZVrVjU4qtm8yA==}
    hasBin: true
    dev: true

  /lilconfig@2.1.0:
    resolution: {integrity: sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==}
    engines: {node: '>=10'}
    dev: true

  /lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}
    dev: true

  /merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}
    dev: true

  /micromatch@4.0.5:
    resolution: {integrity: sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==}
    engines: {node: '>=8.6'}
    dependencies:
      braces: 3.0.2
      picomatch: 2.3.1
    dev: true

  /minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}
    dependencies:
      brace-expansion: 1.1.11
    dev: true

  /mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0
    dev: true

  /nanoid@3.3.6:
    resolution: {integrity: sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true
    dev: true

  /node-releases@2.0.13:
    resolution: {integrity: sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==}
    dev: true

  /normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}
    dev: true

  /normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}
    dev: true

  /object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}
    dev: true

  /object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}
    dev: true

  /once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}
    dependencies:
      wrappy: 1.0.2
    dev: true

  /path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}
    dev: true

  /path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}
    dev: true

  /picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}
    dev: true

  /picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}
    dev: true

  /pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}
    dev: true

  /pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}
    dev: true

  /postcss-import@15.1.0(postcss@8.4.30):
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0
    dependencies:
      postcss: 8.4.30
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.6
    dev: true

  /postcss-js@4.0.1(postcss@8.4.30):
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.30
    dev: true

  /postcss-load-config@4.0.1(postcss@8.4.30):
    resolution: {integrity: sha512-vEJIc8RdiBRu3oRAI0ymerOn+7rPuMvRXslTvZUKZonDHFIczxztIyJ1urxM1x9JXEikvpWWTUUqal5j/8QgvA==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true
    dependencies:
      lilconfig: 2.1.0
      postcss: 8.4.30
      yaml: 2.3.2
    dev: true

  /postcss-nested@6.0.1(postcss@8.4.30):
    resolution: {integrity: sha512-mEp4xPMi5bSWiMbsgoPfcP74lsWLHkQbZc3sY+jWYd65CUwXrUaTp0fmNpa01ZcETKlIgUdFN/MpS2xZtqL9dQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14
    dependencies:
      postcss: 8.4.30
      postcss-selector-parser: 6.0.13
    dev: true

  /postcss-selector-parser@6.0.13:
    resolution: {integrity: sha512-EaV1Gl4mUEV4ddhDnv/xtj7sxwrwxdetHdWUGnT4VJQf+4d05v6lHYZr8N573k5Z0BViss7BDhfWtKS3+sfAqQ==}
    engines: {node: '>=4'}
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2
    dev: true

  /postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}
    dev: true

  /postcss@8.4.30:
    resolution: {integrity: sha512-7ZEao1g4kd68l97aWG/etQKPKq07us0ieSZ2TnFDk11i0ZfDW2AwKHYU8qv4MZKqN2fdBfg+7q0ES06UA73C1g==}
    engines: {node: ^10 || ^12 || >=14}
    dependencies:
      nanoid: 3.3.6
      picocolors: 1.0.0
      source-map-js: 1.0.2
    dev: true

  /queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}
    dev: true

  /read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}
    dependencies:
      pify: 2.3.0
    dev: true

  /readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}
    dependencies:
      picomatch: 2.3.1
    dev: true

  /resolve@1.22.6:
    resolution: {integrity: sha512-njhxM7mV12JfufShqGy3Rz8j11RPdLy4xi15UurGJeoHLfJpVXKdh3ueuOqbYUcDZnffr6X739JBo5LzyahEsw==}
    hasBin: true
    dependencies:
      is-core-module: 2.13.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0
    dev: true

  /reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}
    dev: true

  /run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}
    dependencies:
      queue-microtask: 1.2.3
    dev: true

  /source-map-js@1.0.2:
    resolution: {integrity: sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==}
    engines: {node: '>=0.10.0'}
    dev: true

  /sucrase@3.34.0:
    resolution: {integrity: sha512-70/LQEZ07TEcxiU2dz51FKaE6hCTWC6vr7FOk3Gr0U60C3shtAN+H+BFr9XlYe5xqf3RA8nrc+VIwzCfnxuXJw==}
    engines: {node: '>=8'}
    hasBin: true
    dependencies:
      '@jridgewell/gen-mapping': 0.3.3
      commander: 4.1.1
      glob: 7.1.6
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13
    dev: true

  /supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}
    dev: true

  /tailwindcss@3.3.3:
    resolution: {integrity: sha512-A0KgSkef7eE4Mf+nKJ83i75TMyq8HqY3qmFIJSWy8bNt0v1lG7jUcpGpoTFxAwYcWOphcTBLPPJg+bDfhDf52w==}
    engines: {node: '>=14.0.0'}
    hasBin: true
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.5.3
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.1
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.20.0
      lilconfig: 2.1.0
      micromatch: 4.0.5
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.0.0
      postcss: 8.4.30
      postcss-import: 15.1.0(postcss@8.4.30)
      postcss-js: 4.0.1(postcss@8.4.30)
      postcss-load-config: 4.0.1(postcss@8.4.30)
      postcss-nested: 6.0.1(postcss@8.4.30)
      postcss-selector-parser: 6.0.13
      resolve: 1.22.6
      sucrase: 3.34.0
    transitivePeerDependencies:
      - ts-node
    dev: true

  /thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}
    dependencies:
      thenify: 3.3.1
    dev: true

  /thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}
    dependencies:
      any-promise: 1.3.0
    dev: true

  /to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}
    dependencies:
      is-number: 7.0.0
    dev: true

  /ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}
    dev: true

  /update-browserslist-db@1.0.11(browserslist@4.21.10):
    resolution: {integrity: sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'
    dependencies:
      browserslist: 4.21.10
      escalade: 3.1.1
      picocolors: 1.0.0
    dev: true

  /util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}
    dev: true

  /wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}
    dev: true

  /yaml@2.3.2:
    resolution: {integrity: sha512-N/lyzTPaJasoDmfV7YTrYCI0G/3ivm/9wdG0aHuheKowWQwGTsK0Eoiw6utmzAnI6pkJa0DUVygvp3spqqEKXg==}
    engines: {node: '>= 14'}
    dev: true
{-# START_FILE postcss.config.js #-}
module.exports = {
    plugins: {
        'postcss-import': {},
        tailwindcss: {},
        autoprefixer: {},
    }
}
{-# START_FILE resources/{{name}}.css #-}
@tailwind base;
@tailwind components;
@tailwind utilities;
{-# START_FILE resources/{{name}}.js #-}
window.htmx = require("htmx.org")


/** Fetch the reload url
 * 
 * @returns boolean
 */
const supportsReload = async () => {
    const response = await fetch("/reload")
    if (response.status === 200) {
        const body = await response.json()
        console.log("supports reload", body)
        return body
    } else {
        return false
    }
}

/** @param boolean b */
const supportsOk = b => {
    if (b) {
        // supported and a reload was triggered
        document.location.reload()
    }
}

const supportsError = reason => {
    console.log("support reload: error: ", reason)
    // connection error, propably the repl was closed
    headError("go!")
}


/** returns Promise<number> */
const headReload = async () => {
    const response = await fetch("/reload", { method: "HEAD" })
    console.log("head /reload", response.status)
    return response.status
}

/** @param number status  */
const headOk = status => {
    if (status >= 200 && status < 300) {
        console.log("/reload up, reloading! status=", status)
        document.location.reload()
    } else {
        headError()
    }
}

const headError = (x) => {
    setTimeout(() => headReload().then(headOk).catch(headError), 2000)
}

document.body.addEventListener("htmx:load",
    supportsReload().then(supportsOk).catch(supportsError))


{-# START_FILE src/Xxx/Server/App.hs #-}
{-# LANGUAGE ExtendedDefaultRules #-}
{-# LANGUAGE OverloadedStrings #-}

module Xxx.Server.App where

import Control.Concurrent.Chan.Unagi (dupChan, readChan)
import Control.Monad (forM_, join)
import Data.ByteString (ByteString)
import Data.Function ((&))
import Data.Functor ((<&>))
import Data.HashMap.Strict qualified as H
import Data.List qualified as L
import Data.Maybe (fromMaybe)
import Data.Text (Text)
import Data.Text qualified as T
import Data.Text.Encoding qualified as T
import Lucid
import Lucid.Htmx
import Network.HTTP.Types
  ( HeaderName,
    Status,
    notFound404,
    status200,
    status204,
  )
import Network.Wai
import Network.Wai.Parse (defaultParseRequestBodyOptions, lbsBackEnd, parseRequestBodyEx)
import Xxx.Server.Types

mainApp :: Env -> Application
mainApp Env {reload} req send =
  case (requestMethod req, pathInfo req) of
    -- application
    ("GET", []) ->
      do
        let q =
              queryString req
                & L.lookup "q"
                & join
                & fromMaybe ""
                & decode
        send $ mkOk $ page q
    -- fragments
    ("POST", ["search"]) -> do
      -- threadDelay 1_000_000 (to see the spinner)
      params <- postParams req
      let q = H.lookup "q" params & fromMaybe ""
      send $ mkOk $ search q

    -- reload support
    -- json boolean in the result if reloading should be done
    -- client fetches this until it gets a 200 false
    -- false is returned immediately, true only after we want to reload
    ("GET", ["reload"]) -> do
      case reload of
        Just broadcast -> do
          chan <- dupChan broadcast
          _ <- readChan chan
          send $ responseLBS status200 contentTypeJson "true"
        Nothing ->
          send $ responseLBS status200 contentTypeJson "false"
    ("HEAD", ["reload"]) -> do
      send $ responseLBS status204 contentTypeJson ""

    -- everything else is a 404
    _ -> send $ mkResponse notFound404 errorPage

page :: Text -> Html ()
page q = layout "Htmx Demo" $
  body_ $ do
    navbar q
    div_ [id_ "search-results", class_ "px-2"] $ do
      search q

errorPage :: Html ()
errorPage = layout "Htmx Demo" $
  body_ $ do
    h1_ [class_ "text-3xl font-bold underline"] "Not found"
    pre_
      ( "The page you requested\n"
          <> "Alas! It cannot be found\n"
          <> "Sadness without end\n"
      )

-- transcribing from the daisy ui page
-- https://daisyui.com/components/navbar/
navbar :: Text -> Html ()
navbar q = div_ [class_ "navbar bg-base-100"] $ do
  div_ [class_ "flex-1"] $ do
    a_ [class_ "btn btn-ghost normal-case text-xl"] "Htmx/DaisyUI Demo"
    div_ [id_ "loading", class_ "htmx-indicator loading loading-spinner loading-xl"] ""
  div_ [class_ "flex-none gap-2"] $ do
    div_ [class_ "form-control"] $ do
      input_
        [ type_ "search",
          class_ "input input-bordered w-24 md:w-auto",
          name_ "q",
          value_ q,
          placeholder_ "Search",
          hxPost_ "/search",
          hxTrigger_ "keyup changed delay:500ms, search",
          hxTarget_ "#search-results",
          hxIndicator_ "#loading"
        ]
    div_ [class_ "dropdown dropdown-end"] $ do
      label_ [tabindex_ "0", class_ "btn btn-ghost btn-circle avatar"] $ do
        div_ [class_ "w-10 rounded-full"] $ do
          img_ [src_ "https://daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg"]
      ul_ [tabindex_ "0", class_ "mt-3 z-[1] p-2 shadow menu menu-sm dropdown-content bg-base-100 rounded-box w-52"] $ do
        li_ $ do
          a_ [class_ "justify-between"] $ do
            span_ "Profile"
            span_ [class_ "badge"] "New"
        li_ $ do
          a_ [] "Settings"
          a_ [] "Logout"

-- https://daisyui.com/components/menu/
search :: Text -> Html ()
search q = div_ [] $ do
  if T.null q
    then div_ [class_ "px-2"] "No search results"
    else ul_ [class_ "menu bg-base-200 w-56 rounded-box"] $ do
      forM_ (L.replicate (T.length q) q) $ \x ->
        li_ (toHtml x)

layout :: Text -> Html () -> Html ()
layout title body = html_ $ do
  head_ $ do
    meta_ [charset_ "UTF-8"]
    meta_ [name_ "viewport", content_ "device-width, initial-scale=1.0"]
    title_ (toHtml title)
    link_ [href_ "resources/{{name}}.css", rel_ "stylesheet", type_ "text/css"]
    script_ [src_ "resources/{{name}}.js", type_ "module"] T.empty
  body

contentTypeHtml :: [(HeaderName, ByteString)]
contentTypeHtml = [("Content-Type", "text/html")]

contentTypeJson :: [(HeaderName, ByteString)]
contentTypeJson = [("Content-Type", "application/json")]

mkOk :: Html a -> Response
mkOk = mkResponse status200

mkResponse :: Status -> Html a -> Response
mkResponse status = responseLBS status contentTypeHtml . renderBS

postParams :: Request -> IO (H.HashMap ByteString Text)
postParams req =
  parseRequestBodyEx defaultParseRequestBodyOptions lbsBackEnd req
    <&> H.fromList . fmap decodeValue . fst

decodeValue :: (a, ByteString) -> (a, Text)
decodeValue (k, v) = (k, decode v)

decode :: ByteString -> Text
decode s =
  case T.decodeUtf8' s of
    Left _ -> T.decodeLatin1 s
    Right t -> t
{-# START_FILE src/Xxx/Server/Log.hs #-}
{-# LANGUAGE OverloadedStrings #-}

module Xxx.Server.Log
  ( logDebug,
    logInfo,
    logWarn,
    logError,
    space,
  )
where

import Control.Monad.IO.Class (MonadIO (), liftIO)
import Data.ByteString.Builder (Builder, byteString)
import System.Console.CmdArgs.Verbosity (Verbosity (..))
import System.Log.FastLogger (ToLogStr (toLogStr))
import Xxx.Server.Types (Env (..))

space :: Builder
space = byteString " "

nl :: Builder
nl = byteString "\n"

logUnconditional :: (ToLogStr msg, MonadIO m) => Env -> Builder -> msg -> m ()
logUnconditional Env {logger} lvl msg =
  liftIO $ logger line
  where
    line t = toLogStr (prefix t) <> toLogStr msg <> toLogStr nl
    prefix t = byteString t <> space <> lvl <> space

logDebug :: (ToLogStr msg, MonadIO m) => Env -> msg -> m ()
logDebug env@Env {verbosity} msg
  | verbosity == Loud =
      logUnconditional env "debug" msg
logDebug _ _ = return ()

logInfo :: (ToLogStr msg, MonadIO m) => Env -> msg -> m ()
logInfo env@Env {verbosity} msg
  | verbosity >= Normal =
      logUnconditional env "info>" msg
logInfo _ _ = return ()

logWarn :: (ToLogStr msg, MonadIO m) => Env -> msg -> m ()
logWarn env@Env {verbosity} msg
  | verbosity >= Quiet =
      logUnconditional env "warn>" msg
logWarn _ _ = return ()

logError :: (ToLogStr msg, MonadIO m) => Env -> msg -> m ()
logError env = logUnconditional env "ERROR"
{-# START_FILE src/Xxx/Server/Types.hs #-}
module Xxx.Server.Types where

import Control.Concurrent.Chan.Unagi (InChan)
import System.Console.CmdArgs.Verbosity (Verbosity (..))
import System.Log.FastLogger (TimedFastLogger)

data Env = Env
  { logger :: TimedFastLogger,
    verbosity :: Verbosity,
    reload :: Maybe (InChan ())
  }
{-# START_FILE src/XxxLib.hs #-}
-- allow functions that can never be called, or rather turn off the check
{-# LANGUAGE AllowAmbiguousTypes #-}
-- finer grained kinds for use with GADTs
{-# LANGUAGE DataKinds #-}
-- allow multiple types with the same field names
{-# LANGUAGE DuplicateRecordFields #-}
-- gadt syntax with existential variables
{-# LANGUAGE GADTs #-}
-- string literals use IsString.fromString
{-# LANGUAGE OverloadedStrings #-}
-- type level programming - type level functions
{-# LANGUAGE TypeFamilies #-}
-- permit instance definitions that could bottom the type checker
{-# LANGUAGE UndecidableInstances #-}
-- no common subexpression elemination - may be needed with unsafePerformIO/cmdargs
{-# OPTIONS_GHC -fno-cse #-}

module XxxLib (someFunc, add) where

import GHC.Natural (Natural)

someFunc :: IO ()
someFunc = putStrLn "someFunc"

-- | Add two natural numbers.
--
-- >>> add 17 4
-- 21
add :: Natural -> Natural -> Natural
add a b = a + b
{-# START_FILE tailwind.config.js #-}
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./app/**/*.hs", "./src/**/*.hs"],
  theme: {
    extend: {},
  },
  plugins: [require("daisyui")],
}

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}
{-# START_FILE test/XxxLibSpec.hs #-}
module XxxLibSpec where

import Test.Hspec
import Test.QuickCheck
import XxxLib

spec :: Spec
spec = do
  describe "XxxLib" $ do
    it "has a function and can add two natural number" $ do
      add 17 4 `shouldBe` 21
  describe "read" $ do
    it "is inverse to show" $ property $
      \x -> (read . show) x `shouldBe` (x :: Int)

main :: IO ()
main = hspec spec
{-# START_FILE {{name}}.cabal #-}
cabal-version:      3.6
name:               {{name}}
version:            0.1.0.0
synopsis:           X the {{name}}ing x
-- A longer description of the package.
-- description:
homepage:           https://{{name}}.com/{{name}}
-- A URL where users can report bugs.
-- bug-reports:
license:            MIT
license-file:       LICENSE
author:             {{author}}
maintainer:         spamless.juergen@gmail.com

-- A copyright notice.
-- copyright:
-- category:
extra-source-files: CHANGELOG.md


common deps
    build-depends:
        -- 4.16.4 is ghc 9.2.x
        , base ^>=4.16.4.0
        , base64-bytestring
        , bytestring
        , cmdargs
        , cryptohash-sha256
        , fast-logger
        , filepath
        , filepattern
        , foreign-store
        , mime-types
        , http-types
        , lucid2
        , lucid2-htmx
        -- ghci needs it here instead of the exe
        , shake
        , template-haskell
        , text
        , unagi-chan
        , unordered-containers
        , warp
        -- , warp-tls
        , wai
        , wai-app-static
        , wai-extra
        , wai-logger
        , wai-websockets
        -- , wai-conduit
    default-language: GHC2021

common test-deps
    import: deps
    build-depends:    
        , doctest
        , hspec
        , hspec-discover
        , QuickCheck

common opts
    ghc-options:
        -O      
        -Wall
        -Wcompat
        -Wincomplete-record-updates
        -Wincomplete-uni-patterns
        -Wredundant-constraints

common exec-opts
    import: opts
    ghc-options:      
        -threaded
        -rtsopts
        -with-rtsopts=-N
        -with-rtsopts=-T

        
library
    import:           deps, opts
    exposed-modules:  XxxLib, Xxx.Server.App, Xxx.Server.Types, Xxx.Server.Log
    -- Modules included in this library but not exported.
    -- other-modules:
    -- LANGUAGE extensions used by modules in this package.
    -- other-extensions:
    hs-source-dirs:   src
    
executable {{name}}
    import:           deps, opts, exec-opts
    main-is:          Main.hs
    other-modules:    Dev, Main.Build, Main.BuildTH, Main.Cmd, Main.Server
    build-depends:    {{name}}
    hs-source-dirs:   app

test-suite {{name}}-test
    import:           deps, test-deps, opts, exec-opts
    other-modules:    XxxLibSpec
    build-depends:    {{name}}
    type:             exitcode-stdio-1.0
    hs-source-dirs:   test
    main-is:          Spec.hs
    
